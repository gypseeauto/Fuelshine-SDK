package com.gypsee.sdk.io;

import android.content.Context;
import android.os.Environment;
import android.util.Base64;
import android.util.Log;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;

public class LogCSVWriter {

    private static final String TAG = LogCSVWriter.class.getName();
    //private static final String HEADER_CSV = "This is a logfile generated by pires.obd.reader";
    private static final String[] NAMES_COLUMNS = {"TIME", "LATITUDE", "LONGITUDE",
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO", "CONTROL MODULE VOLTAGE", "TRAVELED_MIL_ON", "DISTANCE AFTER CODES CLEARED", "tripDistance", "ENGINE OIL TEMP",
            "AIR FUEL RATIO", "WIDEBAND AIR FUEL RATIO", "FUEL CONSUMPTION RATE"/*,
            "Accelarometer_x", "Accelarometer_y", "Accelarometer_z", "Magnetometer_x", "Magnetometer_y", "Magnetometer_z"*/};
    private static final String[] NAMES_COLUMNS_ONLY_READINGS = {
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO", "CONTROL_MODULE_VOLTAGE", "DISTANCE_TRAVELED_MIL_ON", "DISTANCE_TRAVELED_AFTER_CODES_CLEARED", "TRIP_DISTANCE", "ENGINE_OIL_TEMP",
            "AIR_FUEL_RATIO", "WIDEBAND_AIR_FUEL_RATIO", "FUEL_CONSUMPTION_RATE",
            /* "Accelarometer_x", "Accelarometer_y", "Accelarometer_z", "Magnetometer_x", "Magnetometer_y", "Magnetometer_z"*/};

    private boolean isFirstLine;
    private BufferedWriter buf;
    private String fileName;

    public LogCSVWriter() {
    }

    public LogCSVWriter(String filename, String dirname, Context context) throws FileNotFoundException, RuntimeException {
        try {
            File sdCard = Environment.getExternalStorageDirectory();
            File dir = new File(sdCard.getAbsolutePath() + File.separator + dirname);
            if (!dir.exists()) dir.mkdirs();

            fileName = sdCard.getAbsolutePath() + File.separator + dirname + File.separator + filename;
            Log.e(TAG, "Path is " + sdCard.getAbsolutePath() + File.separator + dirname + File.separator + filename);
            File file = new File(dir, filename);
//            if (!file.exists()) {
//                file.createNewFile();
//            }

            FileOutputStream fos = new FileOutputStream(file);
//            OutputStreamWriter osw = new OutputStreamWriter(mainActivity.openFileOutput(file.getAbsolutePath(), Context.MODE_PRIVATE));
            OutputStreamWriter osw = new OutputStreamWriter(fos);
            this.buf = new BufferedWriter(osw);
            this.isFirstLine = true;
            Log.d(TAG, "Constructed the LogCSVWriter");
        } catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "LogCSVWriter constructor failed");
        }
    }

    public void closeLogCSVWriter() {
        try {
            if (buf == null)
                return;
            buf.flush();
            buf.close();
            Log.d(TAG, "Flushed and closed");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    int i = 0;

    public void writeLineCSV(double lat, double lon, long time, HashMap<String, String> read) {
        String crl;

        Log.e(TAG, "Write line csv clled : " + i++);
        if (isFirstLine) {

            /*crl = reading.toString();
            addLine(crl);*/
            isFirstLine = false;

            // Add line with the columns
            crl = "";
            for (String ccln : NAMES_COLUMNS) {
                crl += ccln + ",";
            }
            addLine(crl.substring(0, crl.length() - 1)); // remove last ";"
        } else {

            crl = time + "," +
                    lat + "," +
                    lon + ",";

            ArrayList<String> values = new ArrayList<>();
            for (String ccln : NAMES_COLUMNS_ONLY_READINGS) {

                if (ccln.equals("TROUBLE_CODES")) {
                    String troubleOCdes = read.get(ccln);
                    troubleOCdes = troubleOCdes == null ? "" : troubleOCdes.replaceAll("\n", ";");
                    crl += troubleOCdes + ",";
                } else
                    crl += read.get(ccln) + ",";

                values.add(read.get(ccln));
            }

            addLine(crl.substring(0, crl.length() - 1));

            /*String currentLatitude, currentLongitude, userId, vehicleId;

            currentLatitude = String.valueOf(reading.getLatitude());
            currentLongitude = String.valueOf(reading.getLongitude());


            userId = String.valueOf(reading.getAltitude());
            vehicleId = read.get("VIN");*/

          /*  return new Tripmodelclass(currentLatitude, currentLongitude, "0.0", values.get(0), values.get(1), values.get(2), values.get(3), values.get(4),
                    values.get(5), values.get(6), values.get(7), values.get(8), values.get(9), values.get(10), values.get(11), values.get(12), values.get(13), values.get(14), values.get(15),
                    values.get(16), values.get(17), values.get(18), values.get(19), values.get(20), values.get(21), values.get(22), userId, vehicleId);
      */
        }

    }


    private void addLine(String line) {
        if (line != null && buf != null) {
            try {
                buf.write(line, 0, line.length());
                buf.newLine();
                Log.e(TAG, "LogCSVWriter: Wrote" + line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public String encodeFileToBase64Binary(String fileName) {
        String encodedString = "";
        File file = new File(fileName);
        byte[] bytes = new byte[0];
        try {
            bytes = loadFile(file);
            encodedString = Base64.encodeToString(bytes, Base64.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return encodedString;
    }

    private byte[] loadFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);

        long length = file.length();
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }
        byte[] bytes = new byte[(int) length];

        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
                && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
            offset += numRead;
        }

        if (offset < bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }

        is.close();
        return bytes;
    }


}
